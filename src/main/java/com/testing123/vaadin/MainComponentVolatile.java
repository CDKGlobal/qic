package com.testing123.vaadin;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;

public class MainComponentVolatile extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private TabSheet tabSheet_1;
	@AutoGenerated
	private Table table_1;
	@AutoGenerated
	private AbsoluteLayout absoluteLayout_2;
	@AutoGenerated
	private Label label_1;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public MainComponentVolatile() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("1000px");
		mainLayout.setHeight("500px");
		
		// top-level component properties
		setWidth("1000px");
		setHeight("500px");
		
		// tabSheet_1
		tabSheet_1 = buildTabSheet_1();
		mainLayout.addComponent(tabSheet_1, "top:0.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private TabSheet buildTabSheet_1() {
		// common part: create layout
		tabSheet_1 = new TabSheet();
		tabSheet_1.setImmediate(true);
		tabSheet_1.setWidth("1000px");
		tabSheet_1.setHeight("500px");
		
		// absoluteLayout_2
		absoluteLayout_2 = buildAbsoluteLayout_2();
		tabSheet_1.addTab(absoluteLayout_2, "Graph", null);
		
		// table_1
		table_1 = new Table();
		table_1.setImmediate(false);
		table_1.setWidth("-1px");
		table_1.setHeight("-1px");
		tabSheet_1.addTab(table_1, "Table", null);
		
		return tabSheet_1;
	}

	@AutoGenerated
	private AbsoluteLayout buildAbsoluteLayout_2() {
		// common part: create layout
		absoluteLayout_2 = new AbsoluteLayout();
		absoluteLayout_2.setImmediate(false);
		absoluteLayout_2.setWidth("1000px");
		absoluteLayout_2.setHeight("500px");
		
		Graph chart = new Graph();
		chart.setWidth("800px");
		chart.setHeight("400px");
		String readData = "";
		try {
			readData = Reader.JSONParser("/Users/chenc/Documents/workspace/QIC/src/data/" + "data.json");
		} catch (Exception e) {
			e.printStackTrace();
		}
		String data = 
					"[" + 
						"[" + 
							"[1, 1], " + 
							"[2, 3], " + 
							"[3, 2], " +
							"[4, 7], " +
							"[5.5, 4]," +
							"[7, 3]" +
						"]" +
					"]";
		chart.setData(HashMaptoJsonArray.mapToString(Reader.getData()));
		
		String optionsData = "";
		try {
			optionsData = Reader.JSONParser("/Users/chenc/Documents/workspace/QIC/src/data/" + "qic.json");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		String options = 
				"{" + 
				"series : {" + 
					"points: { show: true } " + 
				"}, " +		
				"colors : [\"#033F8D\", \"#033F8D\"]," +
				"yaxis : {" + 
		            "show : true," + 
		            "axisLabel : 'Cycolmatic Complexity'," + 
		            "position: 'left'" + 
		        "}, " +
		        "xaxis : {" +
		            "show : true," + 
		            "axisLabel : 'Throughput'," +
		            "autoscaleMargin : .02" +
		        "},"
						+
					"grid: {" 
						+ 
//						"backgroundColor: {" + 
//							"colors: [" +
//								"\"#00CCFF\"," + 
//								"\"#00CCFF\"" + 
//							"]" + 
//						"}" + 
					"}" + 
				"}"; 
		chart.setOptions(options);
		
		absoluteLayout_2.addComponent(chart);
		return absoluteLayout_2;
	}
}