package com.testing123.ui;


import java.util.Iterator;

import com.testing123.controller.UIState;
import com.testing123.controller.UIState.XAxis;
import com.testing123.dataObjects.ConvertProject;
import com.testing123.dataObjects.DataPointSet;
import com.testing123.dataObjects.FooterData;
import com.testing123.vaadin.FooterSummary;
import com.testing123.vaadin.GetData;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class MainComponent extends CustomComponent {
    public static final String PANEL_WIDTH = QicUI.COMPONENT_WIDTH;
    public static final String PANEL_HEIGHT = QicUI.COMPONENT_HEIGHT;
    public static final String GRAPH_WIDTH = QicUI.GRAPH_WIDTH;
    public static final String GRAPH_HEIGHT = QicUI.GRAPH_HEIGHT;

    private final VerticalLayout container;
    private AbsoluteLayout graph;
    private final UIState state;
    private final DataPointSet queried;

    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public MainComponent(UIState state, GetData data) {
        container = new VerticalLayout();
        this.state = state;
        queried = data.requestData(state);
        buildMainLayout();
        setCompositionRoot(container);
    }

    @AutoGenerated
    private AbsoluteLayout buildMainLayout() {
        // top-level component properties
        setWidth(PANEL_WIDTH);
        setHeight("100%");

        // Graph
        graph = buildGraph();
        Label numberOfProjectAndAuthorSelectedLabel = getNumberOfProjectAndAuthorSelected(state);
        Label projectAndAuthorSelectLabel = getProjectAndAuthorSelected(state);
        numberOfProjectAndAuthorSelectedLabel.addStyleName("selectlabelDisplay");
        container.addComponent(numberOfProjectAndAuthorSelectedLabel);
        container.addComponent(projectAndAuthorSelectLabel);
        container.addComponent(graph);
        HorizontalLayout labelLayout = new HorizontalLayout();
        Label summaryLabel = new Label("Summary: ", ContentMode.HTML);
        Label textLabel = getSummary(state.getX(), queried);
        textLabel.setWidth("800px");
        summaryLabel.setId("labelForTitle");
        textLabel.setId("labelForText");
        projectAndAuthorSelectLabel.setId("proAndAutSelect");
        labelLayout.addComponent(summaryLabel);
        labelLayout.addComponent(textLabel);
        container.addComponent(labelLayout);
        container.addComponent(projectAndAuthorSelectLabel);
        return graph;
    }

    @AutoGenerated
    public AbsoluteLayout buildGraph() {
        // common part: create layout
        graph = new AbsoluteLayout();
        graph.setImmediate(false);
        graph.setWidth(PANEL_WIDTH);
        graph.setHeight(PANEL_HEIGHT);

        Graph chart = new Graph();
        chart.setWidth(GRAPH_WIDTH);
        chart.setHeight(GRAPH_HEIGHT);

        String d = queried.toString();
        chart.setData(d);
        System.out.println(d);

        chart.setOptions(FlotOptions.getString(state));

        graph.addComponent(chart, "top: 25px");
        return graph;
    }

    public Label getSummary(XAxis xValue, DataPointSet dataPointList) {
        String summary = "";
        FooterData ftData = FooterSummary.getFooterData(dataPointList);
        FooterData ftDataByFile = FooterSummary.getFooterDataByFile(dataPointList);
        if (xValue.equals(XAxis.DELTA_LINESOFCODE)) {
            summary += " Churn : " + ftData.getTotal() + " lines of code modified.";
        } else if (xValue.equals(XAxis.DELTA_COMPLEXITY)) {
            summary += " Total Change in Cyclomatic Complexity for the project(s) : <b>" + ftData.getTotal() + "</b> ( <font color=\"red\">+ " + ftData.getPositive() + "</font>, <font color=\"green\">- " + ftData.getNegative() + "</font> )<br>.";
            summary += "\n" + "Change in Cyclomatic Complexity by files : <b>" + ftDataByFile.getTotal() + "</b> ( <font color=\"red\">" + ftDataByFile.getPositive() + " + </font>, <font color=\"green\">" + ftDataByFile.getNegative() + " -</font> ).";
        } else if (xValue.equals(XAxis.LINESOFCODE)) {
            summary += " Total Change in Non Commented Lines of Code for the project(s) <b>: " + ftData.getTotal() + " (</b> <font color=\"red\">+ " + ftData.getPositive() + "</font>, <font color=\"green\">- " + ftData.getNegative() + "</font> )<br>";
            summary += "\n" + "Change in Non Commented Lines of Code by files : <b>" + ftDataByFile.getTotal() + "</b> ( <font color=\"red\">" + ftDataByFile.getPositive() + " + </font>, <font color=\"green\">" + ftDataByFile.getNegative() + " -</font>)";
        }
        Label summaryLabel = new Label(summary, ContentMode.HTML);
        return summaryLabel;
    }

    public Label getNumberOfProjectAndAuthorSelected(UIState state) {
        int numberOfProjects = state.getProjects().size();
        int numberOfAuthors = state.getAuthorsFilter().size();
        String summary = "<b><font size=2>";
        if (state.getX() != XAxis.LINESOFCODE) {
            summary += "From: " + state.getStart().toString() + " to " + state.getEnd().toString() + ", ";
        } else {
            summary += "On: " + state.getStart().toString() + ", ";
        }
        summary += "\tView: " + state.getX().getView() + ". \t";
        summary += numberOfProjects + " projects and ";
        if (numberOfProjects != 0) {
            if (numberOfAuthors == 0) {
                summary += "all authors(default) selected. ";
            } else {
                summary += numberOfAuthors + " authors selected.";
            }
        } else {
            summary += numberOfAuthors + " authors selected.";
        }
        summary += "</font></b>";
        Label numberOfProjectAndAuthorSelected = new Label(summary, ContentMode.HTML);
        return numberOfProjectAndAuthorSelected;
    }

    public Label getProjectAndAuthorSelected(UIState state) {
        int numberOfProjects = state.getProjects().size();
        int numberOfAuthors = state.getAuthorsFilter().size();
        String summary = "";
        if (numberOfProjects != 0) {
            summary += "<b>Project(s) Selected:</b> [ ";
            Iterator<ConvertProject> iter = state.getProjects().iterator();
            summary += iter.next().getName();
            while (iter.hasNext()) {
                summary += ", " + iter.next().getName();
            }
            summary = limitString(summary, 170);
            summary += "<br>";
        }

        if (numberOfAuthors != 0) {
            summary += "<b>Author(s) Selected: </b> [ ";
            Iterator<String> iter = state.getAuthorsFilter().iterator();
            summary += iter.next();
            while (iter.hasNext()) {
                summary += ", " + iter.next();
            }
            summary = limitString(summary, 350);
        }

        Label projectSelected = new Label(summary, ContentMode.HTML);
        return projectSelected;
    }

    private String limitString(String summary, int stringLimit) {
        if (summary.length() > stringLimit) {
            summary = summary.substring(0, stringLimit);
            summary += "... ]";
        } else if (summary.length() != 0) {
            summary += " ]";
        }
        return summary;
    }

}
