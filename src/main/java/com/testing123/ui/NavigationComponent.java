package com.testing123.ui;

import java.util.List;

import com.testing123.controller.AvailableResources;
import com.testing123.controller.ComponentController;
import com.testing123.controller.UIState;
import com.testing123.vaadin.ConvertDate;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.MenuBar;
import com.vaadin.ui.MenuBar.MenuItem;
import com.vaadin.ui.Slider;

public class NavigationComponent extends CustomComponent {

	private AbsoluteLayout mainLayout;
	//private ListSelect listSelect_1;
	private Slider fileGranularitySlider;
	private Button button_1;
	private GridLayout layout;
	private Label errorLabel;
	private UIState state;
	
	private static final String DATE_GRANULARITY_OFFSET = "50px";
	private static final String FILE_GRANULARITY_OFFSET = "0px";
	private static final String COMBOBOX_WIDTH = "200px";
	private static final String DEFAULT_VALUE = "-1px";

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public NavigationComponent(GridLayout layout, UIState state) {
		this.state = state;
		this.layout = layout;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		ComponentController.drawMainComponent(layout, state);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("1000px");
		mainLayout.setHeight("100px");

		// top-level component properties
		setWidth("1000px");
		setHeight("100px");
		
		// fileGranularitySlider
		MenuBar barmenu = new MenuBar();
		barmenu.setStyleName("mybarmenu");
		mainLayout.addComponent(barmenu, "top:" + FILE_GRANULARITY_OFFSET + ";");
		       
		// A feedback component
		final Label selection = new Label("");
		mainLayout.addComponent(selection);

		// Define a common menu command for all the menu items.
		MenuBar.Command mycommand = new MenuBar.Command() {
		    MenuItem previous = null;

		    public void menuSelected(MenuItem selectedItem) {
		        if (previous != null)
		            previous.setStyleName(null);
		        selectedItem.setStyleName("highlight");
		        state.setGrain(selectedItem.toString());
		        previous = selectedItem;
		        
		    }  
		};
		
		// Put some items in the menu
		barmenu.addItem("Projects", null, mycommand);
		barmenu.addItem("Directories", null, mycommand);
		barmenu.addItem("Files", null, mycommand);
		barmenu.addItem("Authors", null, mycommand);
		
		
		// gets all the available dates that can be queried
		List<String> options = AvailableResources.getAvailableDates();
		
		// comboBox_1
	    final ComboBox startComboBox = createComboBox(options, "Start Date");
		mainLayout.addComponent(startComboBox, "top:" + DATE_GRANULARITY_OFFSET +";");
		
		// comboBox_2
		final ComboBox endComboBox = createComboBox(options, "End Date");
		mainLayout.addComponent(endComboBox, "top:" + DATE_GRANULARITY_OFFSET + ";left:220.0px;");
		
		// button_1
		button_1 = new Button();
		button_1.setCaption("Go");
		button_1.setImmediate(false);
		button_1.setWidth(DEFAULT_VALUE);
		button_1.setHeight(DEFAULT_VALUE);
		errorLabel = new Label("");
		button_1.addClickListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				mainLayout.removeComponent(errorLabel);
				if (startComboBox.getValue() == null || endComboBox.getValue() == null) {
					errorLabel = new Label("No date range entered");
					mainLayout.addComponent(errorLabel, "top:" + DATE_GRANULARITY_OFFSET + "; left:510.0px;");
					return;
				} 
				ConvertDate startDate = (ConvertDate) startComboBox.getValue();
				ConvertDate endDate = (ConvertDate) endComboBox.getValue();
				if (checkIfStartDateIsNotLessThanEndDate(startDate, endDate)) {
					errorLabel = new Label("Date range invalid");
					mainLayout.addComponent(errorLabel, "top:" + DATE_GRANULARITY_OFFSET + "; left:510.0px;");
					return;
				}
				state.setStart(startDate);
				state.setEnd(endDate);
				ComponentController.drawMainComponent(layout, state);
			}

			private boolean checkIfStartDateIsNotLessThanEndDate(
					ConvertDate startDate, ConvertDate endDate) {
				return startDate.getSonarFormat().equals(endDate.getSonarFormat()) || 
						startDate.getSonarFormat().compareTo(endDate.getSonarFormat()) > 0;
			}
		});
		mainLayout.addComponent(button_1, "top:" + DATE_GRANULARITY_OFFSET + ";left:440.0px;");

		return mainLayout;
	}

	private ComboBox createComboBox(List<String> options, String tag) {
		return createComboBoxWithLabel(options, tag);
	}

	private ComboBox createComboBoxWithLabel(List<String> options, String label) {
		ComboBox comboBox = new ComboBox(label);
		comboBox.setImmediate(false);
		comboBox.setNullSelectionAllowed(false);
		comboBox.setTextInputAllowed(false);
		comboBox.setWidth(COMBOBOX_WIDTH);
		comboBox.setHeight(DEFAULT_VALUE);

		for (String option : options) {
			comboBox.addItem(new ConvertDate(option));
		}
		return comboBox;
	}

}